{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","BoilingVerdict","props","TemperatureInput","handleChange","bind","e","this","onTemperatureChange","target","value","scale","onChange","React","Component","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAEMA,EAAa,CACfC,EAAG,UACHC,EAAG,cAGP,SAASC,EAAUC,GACf,OAA2B,GAAnBA,EAAa,IAAU,EAGnC,SAASC,EAAaC,GAClB,OAAkB,EAAVA,EAAc,EAAK,GAG/B,SAASC,EAAWC,EAAaC,GAC7B,IAAMC,EAAQC,WAAWH,GACzB,GAAII,OAAOC,MAAMH,GACb,MAAO,GAEX,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAGnB,SAASC,EAAeC,GACpB,OAAIA,EAAMb,SAAW,IACV,oDAEJ,wD,IAGLc,E,YACF,WAAYD,GAAQ,IAAD,8BACf,4CAAMA,KACDE,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,0EAKNC,GACTC,KAAKL,MAAMM,oBAAoBF,EAAEG,OAAOC,S,+BAIxC,IAAMnB,EAAcgB,KAAKL,MAAMX,YACzBoB,EAAQJ,KAAKL,MAAMS,MACzB,OACI,kCACI,wDAA8B5B,EAAW4B,GAAzC,KACA,2BAAOD,MAAOnB,EACPqB,SAAUL,KAAKH,oB,GAjBPS,IAAMC,WA8DtBC,E,YAtCX,WAAYb,GAAQ,IAAD,8BACf,4CAAMA,KACDc,oBAAsB,EAAKA,oBAAoBX,KAAzB,gBAC3B,EAAKY,uBAAyB,EAAKA,uBAAuBZ,KAA5B,gBAC9B,EAAKa,MAAQ,CAAC3B,YAAa,GAAIoB,MAAO,KAJvB,E,iFAOCpB,GAChBgB,KAAKY,SAAS,CAACR,MAAO,IAAKpB,kB,6CAGRA,GACnBgB,KAAKY,SAAS,CAACR,MAAO,IAAKpB,kB,+BAI3B,IAAMoB,EAAQJ,KAAKW,MAAMP,MACnBpB,EAAcgB,KAAKW,MAAM3B,YACzBF,EAAoB,MAAVsB,EAAgBrB,EAAWC,EAAaL,GAAaK,EAC/DJ,EAAuB,MAAVwB,EAAgBrB,EAAWC,EAAaH,GAAgBG,EAE3E,OACI,6BACI,kBAAC,EAAD,CACIoB,MAAM,IACNpB,YAAaF,EACbmB,oBAAqBD,KAAKS,sBAC9B,kBAAC,EAAD,CACIL,MAAM,IACNpB,YAAaJ,EACbqB,oBAAqBD,KAAKU,yBAC9B,kBAAChB,EAAD,CACIZ,QAASK,WAAWL,KAV5B,S,GAvBawB,IAAMC,WC3ChBM,E,iLAPP,OACI,kBAAC,EAAD,U,GAHMP,IAAMC,WCSJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.45cb18d3.chunk.js","sourcesContent":["import React from 'react';\n\nconst scaleNames = {\n    c: 'Celsius',\n    f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) { // перевод в цельсии\n    return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) { // перевод в фаренгейты\n    return (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) { // функция конвертации с проверкой\n    const input = parseFloat(temperature); // обрезка строки до десятичной дроби\n    if (Number.isNaN(input)) { // пропустит только число\n        return '';\n    }\n    const output = convert(input); // запуск функции конвертации\n    const rounded = Math.round(output * 1000) / 1000; // округление\n    return rounded.toString(); // приведение к строке\n}\n\nfunction BoilingVerdict(props) {\n    if (props.celsius >= 100) {\n        return <p>The water would boil.</p>;\n    }\n    return <p>The water would not boil.</p>;\n}\n\nclass TemperatureInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onTemperatureChange(e.target.value); // \"1\", \"33.8\"\n    }\n\n    render() {\n        const temperature = this.props.temperature; // \"1\", \"33.8\"\n        const scale = this.props.scale; // c, f\n        return (\n            <fieldset>\n                <legend>Enter temperature in {scaleNames[scale]}:</legend>\n                <input value={temperature}\n                       onChange={this.handleChange} />\n            </fieldset>\n        );\n    }\n}\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n        this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n        this.state = {temperature: '', scale: 'c'};\n    }\n\n    handleCelsiusChange(temperature) {\n        this.setState({scale: 'c', temperature}); // c \"1\"\n    }\n\n    handleFahrenheitChange(temperature) {\n        this.setState({scale: 'f', temperature});\n    }\n\n    render() {\n        const scale = this.state.scale; // с\n        const temperature = this.state.temperature; // \"1\"\n        const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature; // \"1\"\n        const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature; // \"33.8\"\n\n        return (\n            <div>\n                <TemperatureInput\n                    scale=\"c\"\n                    temperature={celsius} // \"1\"\n                    onTemperatureChange={this.handleCelsiusChange} />\n                <TemperatureInput\n                    scale=\"f\"\n                    temperature={fahrenheit} // \"33.8\"\n                    onTemperatureChange={this.handleFahrenheitChange} />\n                <BoilingVerdict\n                    celsius={parseFloat(celsius)} /> {/* \"1\" */}\n            </div>\n        );\n    }\n}\n\nexport default Calculator","import React from 'react'\nimport Calculator from \"./components/Calculator\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Calculator/>\n        )\n    }\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}